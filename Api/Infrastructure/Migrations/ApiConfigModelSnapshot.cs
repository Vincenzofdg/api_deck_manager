// <auto-generated />
using Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApiConfig))]
    partial class ApiConfigModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Api.Infrastructure.Entities.CardEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("CollectionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("collection_id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<bool>("Foil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("foil");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<string>("ManaCost")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mana_cost");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("PK_Card_Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.CollectionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("icon_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int")
                        .HasColumnName("release_year");

                    b.HasKey("Id")
                        .HasName("PK_Collection_Id");

                    b.ToTable("collections", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "210525-3jP6J4-160849",
                            Amount = 281,
                            Description = "The epic climax of the Phyrexian arc, where all planes unite against Elesh Norn’s multiversal invasion.",
                            IconUrl = "https://example.com/icons/mom.png",
                            Name = "March of the Machine",
                            ReleaseYear = 2023
                        },
                        new
                        {
                            Id = "210525-f7CwFg-160857a",
                            Amount = 287,
                            Description = "A time-traveling journey back to the legendary conflict between Urza and Mishra, shaping Magic's early lore.",
                            IconUrl = "https://example.com/icons/mom.png",
                            Name = "The Brothers’ War",
                            ReleaseYear = 2022
                        },
                        new
                        {
                            Id = "210525-MFy4Qc-160824",
                            Amount = 271,
                            Description = "A return to New Phyrexia, showcasing the brutal unity of the Phyrexians and their plan to conquer the Multiverse.",
                            IconUrl = "https://example.com/icons/mom.png",
                            Name = "Phyrexia: All Will Be One",
                            ReleaseYear = 2023
                        },
                        new
                        {
                            Id = "210525-nq8CKU-160836",
                            Amount = 302,
                            Description = "A futuristic reimagining of Kamigawa blending high-tech and tradition in a cyberpunk-inspired plane.",
                            IconUrl = "https://example.com/icons/mom.png",
                            Name = "Kamigawa: Neon Dynasty",
                            ReleaseYear = 2022
                        });
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.DeckEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("name");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Deck_Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("decks", (string)null);
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.TypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PK_Type_Id");

                    b.ToTable("deck_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "210525-LOUq7e-161113",
                            Description = "A non-rotating format with cards from 8th Edition forward, allowing a wide but regulated pool of cards.",
                            Name = "Modern",
                            Total = 60
                        },
                        new
                        {
                            Id = "210525-mKawsj-161128",
                            Description = "A format where only common-rarity cards are allowed, promoting budget-friendly and strategic gameplay.",
                            Name = "Pauper",
                            Total = 60
                        },
                        new
                        {
                            Id = "210525-oUaYF4-161058",
                            Description = "A multiplayer format where each deck has 100 singleton cards and is led by a legendary creature known as the commander.",
                            Name = "Commander",
                            Total = 100
                        },
                        new
                        {
                            Id = "210525-RspDhL-161105",
                            Description = "A rotating format using the most recent sets, designed for balanced competitive play.",
                            Name = "Standard",
                            Total = 60
                        },
                        new
                        {
                            Id = "210525-Sd3WF4-161119",
                            Description = "A limited format where players build decks by selecting cards from booster packs in real-time.",
                            Name = "Draft",
                            Total = 40
                        });
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.UserCardEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasMaxLength(300)
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("card_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserCard_Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("user_cards", (string)null);
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_User_Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "210525-G3nVW2-160305",
                            Email = "vincenzo@email.com",
                            Name = "Vincenzo F. Di Giacomo"
                        });
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.CardEntity", b =>
                {
                    b.HasOne("Api.Infrastructure.Entities.CollectionEntity", "Collection")
                        .WithMany("Cards")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Card_Collection");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.DeckEntity", b =>
                {
                    b.HasOne("Api.Infrastructure.Entities.TypeEntity", "Type")
                        .WithMany("Decks")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Type_Id");

                    b.HasOne("Api.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Deck_Id");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.UserCardEntity", b =>
                {
                    b.HasOne("Api.Infrastructure.Entities.CardEntity", "Card")
                        .WithMany("UserCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Card_Id");

                    b.HasOne("Api.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Id");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.CardEntity", b =>
                {
                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.CollectionEntity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.TypeEntity", b =>
                {
                    b.Navigation("Decks");
                });

            modelBuilder.Entity("Api.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("UserCards");
                });
#pragma warning restore 612, 618
        }
    }
}
